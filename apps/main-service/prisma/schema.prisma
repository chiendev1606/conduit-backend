// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// Auth & User Service
// ==============================

enum Role {
  USER
  ADMIN
}

enum EmotionEnum {
  LIKE
  SMILE
  CRY
  LOL
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  username   String     @unique
  image      String?   @default("https://api.realworld.io/images/smiley-cyrus.jpeg")
  bio        String?    @map("bio")
  role       Role       @default(USER)
  followers  Follow[]   @relation("Followers")
  following  Follow[]   @relation("Following")
  emotions   Emotion[]
  favorites  Favorite[]
  articles   Article[]
  comments   Comment[]
  @@map("user")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  follower  User @relation("Followers", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follow")
}

// ==============================
// Article Service
// ==============================

model Article {
  id        String     @id @default(uuid())
  title     String
  content   String
  contentMd String     @map("content_md")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  tags      Tag[]
  emotions  Emotion[]
  favorites Favorite[]
  createdBy String
  user      User       @relation(fields: [createdBy], references: [id])
  comments  Comment[]
  @@map("article")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique()
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  articles  Article[]

  @@map("tag")
}

// ==============================
// Interaction Service
// ==============================

model Emotion {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  articleId String      @map("article_id")
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  article   Article     @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      EmotionEnum
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@unique([userId, articleId])
  @@map("emotion")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  articleId String   @map("article_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, articleId])
  @@map("favorite")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  articleId String   @map("article_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comment")
}
