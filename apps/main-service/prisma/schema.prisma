// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pg_trgm]
}

model Article {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  body        String    @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  tagList     Tag[]
  author      User      @relation("UserArticles", fields: [authorId], onDelete: Cascade, references: [id])
  authorId    Int       @map("author_id")
  favoritedBy User[]    @relation("UserFavorites")
  comments    Comment[]

  @@index([authorId])
  @@index([createdAt(sort: Desc)])
  @@index([slug])
  @@index([title])
  @@index([authorId, createdAt(sort: Desc)])
  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  body      String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int      @map("article_id")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int      @map("author_id")

  @@index([articleId])
  @@index([authorId])
  @@index([createdAt(sort: Desc)])
  @@index([articleId, createdAt(sort: Desc)])
  @@map("comments")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]

  @@index([name])
  @@map("tags")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  password   String
  image      String?   @default("https://avatar.iran.liara.run/public/38")
  bio        String?   @db.Text
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  articles   Article[] @relation("UserArticles")
  favorites  Article[] @relation("UserFavorites")
  followedBy User[]    @relation("UserFollows")
  following  User[]    @relation("UserFollows")
  comments   Comment[]
  demo       Boolean   @default(false)

  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@map("users")
}